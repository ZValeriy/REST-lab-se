Ты — эксперт по проектированию REST API и спецификациям OpenAPI.  
Твоя задача — сгенерировать набор примеров ответов (`examples`) для указанной OpenAPI-схемы.  

---

### Цель
Создать исчерпывающий набор примеров, отражающих:
- **валидные** (успешные) сценарии,
- **граничные** и **редкие** кейсы (минимальные/максимальные значения, пустые коллекции, альтернативные статусы),
- **ошибочные** ответы (валидация, конфликты, отсутствующие данные, дубликаты и т.д.).

Все примеры должны быть в формате, совместимом с OpenAPI:
```yaml
examples:
  success:
    summary: Обычный успешный ответ
    value: {...}
  edge_min:
    summary: Минимальные значения
    value: {...}
  edge_max:
    summary: Максимальные значения
    value: {...}
  validation_error:
    summary: Ошибка валидации
    value: {...}
  conflict:
    summary: Конфликт (409)
    value: {...}
  not_found:
    summary: Не найдено (404)
    value: {...}
```

### Входные данные:

Ниже приведена OpenAPI-схема, для которой нужно сгенерировать примеры.
Используй её поля, типы данных, ограничения (minLength, maxLength, enum, minimum, maximum, pattern, required)
и взаимосвязи между полями, чтобы примеры были логичными и корректными.

Схема:
// Сюда необходимо вставить схему

### Требования к генерации:
1.	Для валидных примеров — создай реалистичные данные, соответствующие типам и ограничениям.
2.	Для граничных кейсов:
    •	минимальные и максимальные значения числовых полей;
	•	пустые строки, пустые массивы;
	•	редкие, но допустимые варианты enum.
3.	Для ошибочных кейсов:
	•	значения, нарушающие ограничения (amount = -1, status = "unknown");
	•	отсутствующие обязательные поля;
	•	дубликаты, вызывающие 409 Conflict;
	•	отсутствие ресурса (404 Not Found);
	•	ошибки авторизации (401, 403).
4.	Валидация должна соответствовать схеме — не добавляй полей, которых нет.
5.	Все примеры должны быть кратко аннотированы в summary, чтобы было понятно, какой кейс демонстрируется.
6.	Итоговый ответ выведи в формате YAML, как фрагмент OpenAPI (examples:), готовый для вставки в спецификацию.

### Пример запроса для контекста:

Если схема выглядит так:
```yaml
components:
  schemas:
    Order:
      type: object
      required: [id, user_id, amount, status]
      properties:
        id: {type: integer, example: 101}
        user_id: {type: integer}
        amount: {type: number, minimum: 0.01, maximum: 10000}
        status: {type: string, enum: [new, paid, canceled]}
        items:
          type: array
          items:
            type: string
          minItems: 0
          maxItems: 5
```
Тогда ожидаемый результат должен быть такого формата:
```yaml 
examples:
  success:
    summary: Заказ успешно создан
    value:
      id: 101
      user_id: 555
      amount: 249.90
      status: "new"
      items: ["coffee", "sandwich"]
  edge_min:
    summary: Минимальные значения (один пустой заказ)
    value:
      id: 1
      user_id: 1
      amount: 0.01
      status: "new"
      items: []
  edge_max:
    summary: Максимальные значения по полям
    value:
      id: 999999
      user_id: 10000
      amount: 10000
      status: "paid"
      items: ["item1", "item2", "item3", "item4", "item5"]
  validation_error:
    summary: Ошибка — отрицательная сумма
    value:
      id: 101
      user_id: 555
      amount: -50
      status: "paid"
      items: []
  conflict:
    summary: Ошибка — заказ с таким ID уже существует
    value:
      detail: "Order with ID 101 already exists"
  not_found:
    summary: Ошибка — заказ не найден
    value:
      detail: "Order with ID 9999 not found"
```

### Формат вывода:
	•	Markdown-блок с YAML (```yaml ... ```).
	•	Все примеры внутри одного examples: блока.
	•	Без пояснений вне YAML — только готовый фрагмент для вставки в OpenAPI.
Ты — помощник по OpenAPI/Prism.
Задача: сгенерировать примеры ответов (OpenAPI `examples`) и при необходимости добавить динамическую генерацию (`x-faker`) для моей спецификации.

Вход:
— Фрагменты моей OpenAPI‑спецификации (paths + components.schemas)

Сделай:
1) Для каждого 2xx/4xx/5xx ответа добавь реалистичные `examples`.
2) Для массивов добавь 2–3 элемента с разными кейсами (включая граничные).
3) Для полей с датами/идентификаторами/логинами предложи `x-faker`.
4) Подсвети, где пригодится заголовок `Prefer: example=<name>` и `Prefer: dynamic=true`.
5) Верни результат патчем YAML, без лишнего текста.
